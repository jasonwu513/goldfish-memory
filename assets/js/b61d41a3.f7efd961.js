"use strict";(self.webpackChunkdiary=self.webpackChunkdiary||[]).push([[2861],{3905:(e,r,n)=>{n.d(r,{Zo:()=>p,kt:()=>d});var t=n(67294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),g=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},p=function(e){var r=g(e.components);return t.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},s=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=g(n),d=o,m=s["".concat(i,".").concat(d)]||s[d]||u[d]||a;return n?t.createElement(m,l(l({ref:r},p),{},{components:n})):t.createElement(m,l({ref:r},p))}));function d(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=s;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var g=2;g<a;g++)l[g]=n[g];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}s.displayName="MDXCreateElement"},31180:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>g});var t=n(87462),o=(n(67294),n(3905));const a={},l="log zap \u8a2d\u5b9a\u6d41\u7a0b",c={unversionedId:"Golang/zap",id:"Golang/zap",title:"log zap \u8a2d\u5b9a\u6d41\u7a0b",description:"generate core",source:"@site/docs/Golang/zap.md",sourceDirName:"Golang",slug:"/Golang/zap",permalink:"/goldfish-memory/docs/Golang/zap",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Golang/zap.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"gore",permalink:"/goldfish-memory/docs/Golang/prefer-packages/gore"},next:{title:"Mac",permalink:"/goldfish-memory/docs/HotKeyAndCheatSheet/mac"}},i={},g=[{value:"generate core",id:"generate-core",level:2},{value:"level",id:"level",level:3},{value:"encoder",id:"encoder",level:3},{value:"writer",id:"writer",level:3},{value:"generate logger",id:"generate-logger",level:2}],p={toc:g};function u(e){let{components:r,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"log-zap-\u8a2d\u5b9a\u6d41\u7a0b"},"log zap \u8a2d\u5b9a\u6d41\u7a0b"),(0,o.kt)("h2",{id:"generate-core"},"generate core"),(0,o.kt)("p",null,"\u751f\u6210\u4e00\u500b logger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"Core := zapcore.NewCore(encoder, mainWriter, logLevel)\n//  \n\nLogger = zap.New(core, zap.AddCaller(), zap.AddCallerSkip(1))\n")),(0,o.kt)("p",null,"\u6bcf\u500b zapcore.Core \u5be6\u4f8b\u90fd\u4ee3\u8868\u4e86\u4e00\u500b\u65e5\u8a8c\u5beb\u5165\u7ba1\u9053\n\u8981\u751f\u6210\u4e00\u500b logger core\uff0c \u6709\u4e09\u500b\u8981\u7d20"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"level"),(0,o.kt)("li",{parentName:"ol"},"encoder"),(0,o.kt)("li",{parentName:"ol"},"writer (output)")),(0,o.kt)("h3",{id:"level"},"level"),(0,o.kt)("p",null,"level \u5f9e\u6700\u4f4e\u5230\u6700\u9ad8\u5206\u5225\u662f"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Debug"),(0,o.kt)("li",{parentName:"ol"},"Info"),(0,o.kt)("li",{parentName:"ol"},"Warn"),(0,o.kt)("li",{parentName:"ol"},"Error"),(0,o.kt)("li",{parentName:"ol"},"DPanic"),(0,o.kt)("li",{parentName:"ol"},"Panic"),(0,o.kt)("li",{parentName:"ol"},"Fatal")),(0,o.kt)("p",null,"\u53ef\u4ee5\u76f4\u63a5\u7528 "),(0,o.kt)("p",null,"EmailLevel := zapcore.ErrorLevel "),(0,o.kt)("p",null,"\u6216\u662f "),(0,o.kt)("p",null,"var logLevel zapcore.Level\nif err := logLevel.UnmarshalText([]byte(logLevelString)); err != nil {\npanic(err)\n}"),(0,o.kt)("p",null,"\u8a2d\u5b9alog level"),(0,o.kt)("h3",{id:"encoder"},"encoder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func getEncoder() zapcore.Encoder {\n    encoderConfig := zapcore.EncoderConfig{\n        TimeKey:        "time",\n        LevelKey:       "level",\n        NameKey:        "logger",\n        CallerKey:      "caller",\n        FunctionKey:    zapcore.OmitKey,\n        MessageKey:     "message",\n        StacktraceKey:  "stacktrace",\n        LineEnding:     zapcore.DefaultLineEnding,      // \u7bc4\u4f8b : \\n\n        EncodeLevel:    zapcore.CapitalLevelEncoder,    // \u7bc4\u4f8b : INFO\n        EncodeTime:     zapcore.RFC3339TimeEncoder,     // \u7bc4\u4f8b : 2021-08-31T15:00:00+08:00\n        EncodeDuration: zapcore.SecondsDurationEncoder, // \u7bc4\u4f8b : 0.000000\n        EncodeCaller:   zapcore.ShortCallerEncoder,     // \u7bc4\u4f8b : main.go:14\n    }\n    // encoderConfig.EncodeTime = zapcore.RFC3339TimeEncoder\n    // encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder\n    return zapcore.NewJSONEncoder(encoderConfig)\n}\n\n// SecondsDurationEncoder \u4f7f\u7528\u7bc4\u4f8b\n\nstart := time.Now()\n// \u5047\u8a2d\u9019\u88e1\u662f\u57f7\u884c\u4efb\u52d9\u7684\u4ee3\u78bc\nduration := time.Since(start)\nlogger.Info("Task completed", zap.Duration("duration", duration))\n\n')),(0,o.kt)("h3",{id:"writer"},"writer"),(0,o.kt)("p",null,"writer \u7684\u4f5c\u7528\u662f\u5c07 log \u5beb\u5165\u5230\u6307\u5b9a\u7684\u5730\u65b9"),(0,o.kt)("p",null,"ex : \u5beb\u5230console.log"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'\nmainWriter := getLogWriter(config.Get("log.logDir"))\n\nfunc getLogWriter(logPath string) zapcore.WriteSyncer {\n    lumberjackLogger := &lumberjack.Logger{\n        Filename:   logPath,\n        MaxSize:    config.GetInt("log.logMaxSize"), // megabytes\n        MaxBackups: config.GetInt("log.logMaxBackups"),\n        MaxAge:     config.GetInt("log.logMaxAge"), // days\n        Compress:   true,\n    }\n\n    // MultiWriteSyncer will write logs to both the console and the file\n    return zapcore.NewMultiWriteSyncer(\n        zapcore.AddSync(os.Stdout),\n        zapcore.AddSync(lumberjackLogger),\n    )\n}\n\n// \u5ba2\u88fd\u5316 writer\n\n\n    EmailCore := zapcore.NewCore(\n        encoder,\n        &EmailWriteSyncer{},\n        EmailLevel,\n    )\n\n\n\ntype CustomLogger struct {\n    *zap.Logger\n}\n\n// \u65b0\u7684LogIf\u65b9\u6cd5\nfunc (l *CustomLogger) LogIf(err error) {\n    if err != nil {\n        l.Error("Error Occurred:", zap.Error(err))\n    }\n}\n\n// NewCustomLoggerFactory \u5275\u5efa\u4e00\u500b\u65b0\u7684CustomLogger\u5be6\u4f8b\nfunc NewCustomLoggerFactory(z *zap.Logger) *CustomLogger {\n    return &CustomLogger{z}\n}\n\nvar Logger *zap.Logger\nvar AccessLogger *zap.Logger\nvar NewCustomLogger *CustomLogger\n\ntype EmailWriteSyncer struct{}\n\nfunc (e *EmailWriteSyncer) Write(p []byte) (n int, err error) {\n    subject := "ERP SYSTEM Error Log Message" // Email \u4e3b\u65e8\n    body := string(p)\n\n    _, sendErr := e.sendEmail(subject, body)\n    if sendErr != nil {\n        fmt.Println("Failed to send email:", sendErr)\n    }\n\n    return len(p), nil\n}\n\nfunc (e *EmailWriteSyncer) Sync() error {\n    return nil // \u6c92\u6709\u540c\u6b65/\u5237\u65b0\u7684\u9700\u6c42\n}\n\nfunc (e *EmailWriteSyncer) sendEmail(\n\n    subject string,\n    body string,\n) (bool, error) {\n    // \u9019\u88e1\u662f\u5bc4\u4fe1\u7684\u4ee3\u78bc\n    return true, nil\n}\n\n')),(0,o.kt)("h2",{id:"generate-logger"},"generate logger"),(0,o.kt)("p",null,"\u751f\u6210\u4e00\u500b logger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"Logger = zap.New(core, zap.AddCaller(), zap.AddCallerSkip(1))\n")),(0,o.kt)("p",null,"\u5982\u679c\u6709\u591a\u500b core \u53ef\u4ee5\u7528 TEE \u4f86\u5408\u4f75"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// TEE \u6703\u5c07 log \u5beb\u5165\u5230\u5169\u500b core\nLogger = zap.New(zapcore.NewTee(core, EmailCore), zap.AddCaller(), zap.AddCallerSkip(1))\n")),(0,o.kt)("p",null,"\u5982\u679c\u60f3\u8981 \u7d00\u9304 json \u7684\u6642\u5019\uff0c\u53ef\u4ee5\u7528"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func RequestLogger() gin.HandlerFunc {\n    return func(c *gin.Context) {\n\n        // Read and save the request body\n        bodyBytes, err := io.ReadAll(c.Request.Body)\n        if err != nil {\n            global.AccessLog.Error("Failed to read request body", zap.Error(err))\n        }\n        // Replace the original body so subsequent handlers can read it\n        c.Request.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))\n\n        c.Next()\n\n        var requestBody map[string]interface{}\n        if err := json.Unmarshal(bodyBytes, &requestBody); err != nil {\n            global.AccessLog.Error("JSON parse fail", zap.Error(err))\n            return\n        }\n\n        global.AccessLog.Info(\n            "RequestLogger",\n            zap.String("method", c.Request.Method),\n            zap.String("uri", c.Request.RequestURI),\n            zap.String("proto", c.Request.Proto),\n            zap.Int("status", c.Writer.Status()),\n            zap.String("user-agent", c.Request.UserAgent()),\n            zap.String("ip", c.ClientIP()),\n            zap.Any("header", c.Request.Header),\n        )\n\n        global.AccessLog.Info("requestBody", zap.Any("requestBody", requestBody))\n\n    }\n}\n')))}u.isMDXComponent=!0}}]);